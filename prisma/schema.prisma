generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  name          String?
  emailVerified DateTime?
  image         String?
  role          ROLE      @default(USER)
  canEmail      Boolean   @default(true)
  accounts      Account[]
  sessions      Session[]
  comments      Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model School {
  id      Int     @id @default(autoincrement())
  name    String
  short   String
  classes Class[]

  @@index([name, short])
  @@map("schools")
}

model Class {
  id            Int       @id @default(autoincrement())
  schoolId      Int?
  name          String
  department    String
  avgDifficulty Float?      @default(0) @map("avg_difficulty")
  avgGrade      Float?      @default(0) @map("avg_grade")
  avgBooster    Float?      @default(0) @map("avg_boost")
  numComments   Int         @default(0) @map("num_comments")
  school        School?     @relation(fields: [schoolId], references: [id])
  comments      Comment[]

  @@index([schoolId, department])
  @@map("classes")
}

model Comment {
  id                 Int                 @id @default(autoincrement())
  userId             String
  classId            Int
  createdAt          DateTime            @default(now()) @map("created_at")
  difficulty         Int
  isRecommended      Boolean?            @map("is_recommended")
  upvoteCount        Int                 @default(0) @map("upvote_count")
  workload           Int?
  teacher            String?
  department         String?
  isGPABooster       Int?                @map("gpa_booster")
  deleted            Boolean             @default(false)
  commentInteraction COMMENT_INTERACTION @default(NONE) @map("comment_interaction")
  gradeRecieved      Int?                @map("grade_recieved")
  primaryText        String?             @default("") @map("primary_text") @db.VarChar(350)
  secondaryText      String?             @default("") @map("secondary_text") @db.VarChar(350)
  class              Class               @relation(fields: [classId], references: [id])
  User               User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([classId])
  @@map("comments")
}

enum ROLE {
  USER
  ADMIN
}

enum COMMENT_INTERACTION {
  LIKED
  DISLIKED
  NONE
}
