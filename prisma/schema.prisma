datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  canEmail      Boolean   @default(true)
  emailVerified DateTime?
  image         String?

  role          ROLE      @default(USER)
  comments      Comment[]
  accounts      Account[]
  sessions      Session[]
}

enum ROLE {
  USER
  ADMIN
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model School {
  id        Int       @id @default(autoincrement())
  name      String
  short     String
  classes Class[]

  @@index([name, short])
  @@map("schools")
}

model Class {
  id          Int       @id @default(autoincrement())
  school      School?   @relation(fields: [schoolId], references: [id])
  schoolId    Int?

  name        String
  department  String?
  comments    Comment[]

  @@index([schoolId])
  @@map("classes")
}

model Comment {
  id                  Int                     @id @default(autoincrement())
  User                User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String
  class               Class                   @relation(fields: [classId], references: [id])
  classId             Int
  
  department          String?
  deleted             Boolean                 @default(false)
  createdAt           DateTime                @default(now())   @map("created_at")
  overview            String                  @db.VarChar(350)
  tips                String                  @db.VarChar(350)
  difficulty          Int       
  upvoteCount         Int                     @default(0)       @map("upvote_count")
  commentInteraction  COMMENT_INTERACTION     @default(NONE)
  gradeRecieved       Int?                  
  teacher             String?
  workload            Int?                    
  isGPABooster        Int?                    @map("gpa_booster")
  isRecommended       Boolean?                @map("is_recommended")

  @@index([classId])
  @@map("comments")
}

enum GRADE {
  APLUS     // 1
  A         // 2
  AMINUS    // 3
  BPLUS     // 4
  B         // 4
  BMINUS    // 5
  CPLUS     // 5
  C         // 6
  CMINUS    // 7
  D         // 8
  F         // 9
  UNKNOWN
}

enum COMMENT_INTERACTION {
  LIKED
  DISLIKED
  NONE
}
