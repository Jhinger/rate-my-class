generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "prisma-zod-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// @@Gen.model(hide: true)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

/// @@Gen.model(hide: true)
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// @@Gen.model(hide: true)
model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  name          String?
  emailVerified DateTime?
  image         String?
  role          ROLE      @default(USER)
  canEmail      Boolean   @default(true)
  accounts      Account[]
  sessions      Session[]
  comments      Comment[]
}

/// @@Gen.model(hide: true)
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/// @@Gen.model(hide: true)
model School {
  id          Int          @id @default(autoincrement())
  name        String
  short       String
  departments Department[]
  classes     Class[]

  @@index([short])
  @@map("schools")
}

/// @@Gen.model(hide: true)
model Department {
  id          Int     @id @default(autoincrement())
  name        String
  avgGrade    Float   @default(0)
  schoolId    Int
  numComments Int     @default(0)
  school      School  @relation(fields: [schoolId], references: [id])
  classes     Class[]

  @@index([schoolId, numComments(sort: Desc)])
}

/// @@Gen.model(hide: true)
model Class {
  id              Int         @id @default(autoincrement())
  schoolId        Int
  name            String
  avgDifficulty   Float?      @default(0) @map("avg_difficulty")
  avgGrade        Float?      @default(0) @map("avg_grade")
  numComments     Int         @default(0) @map("num_comments")
  avgBooster      Float?      @default(0) @map("avg_boost")
  departmentId    Int
  avgWorkload     Float?      @default(0) @map("avg_workload")
  avgRecommended  Float?      @default(0) @map("avg_recommended")
  department      Department  @relation(fields: [departmentId], references: [id])
  school          School      @relation(fields: [schoolId], references: [id])
  comments        Comment[]

  @@index([schoolId])
  @@index([schoolId, name])
  @@map("classes")
}

/// @@Gen.model(hide: true)
model Comment {
  id            Int      @id @default(autoincrement())
  userId        String
  classId       Int
  createdAt     DateTime @default(now()) @map("created_at")
  difficulty    Int
  isRecommended Boolean  @map("is_recommended")
  upvoteCount   Int      @default(0) @map("upvote_count")
  workload      Int
  teacher       String?  @db.VarChar(25)
  isGPABooster  Int      @map("gpa_booster")
  overallRating Float    @map("overall_rating")
  tags          TAG[]    
  deleted       Boolean  @default(false)
  delivery      DELIVERY
  gradeRecieved Int      @map("grade_recieved")
  primaryText   String   @default("") @map("primary_text") @db.VarChar(350)
  secondaryText String?  @default("") @map("secondary_text") @db.VarChar(350)
  Class         Class    @relation(fields: [classId], references: [id])
  User          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([classId])
  @@index([classId, gradeRecieved])
  @@index([classId, deleted])
  @@index([userId])
  @@map("comments")
}

// @@Gen.model(hide: true)
model Report {
  id          Int       @id @default(autoincrement())
  dateCreated DateTime  @default(now())
  classId     Int
  userId      String
  commentId   Int
  reporteeId  String

  @@unique([commentId, reporteeId])
  @@index([classId])
}

enum DELIVERY {
  INPERSON
  ONLINE
}

enum ROLE {
  USER
  ADMIN
}

enum TAG {
  TEST_HEAVY
  ASSIGNMENT_HEAVY
  LECTURES_RECORDED
  REQUIRED
  AVOID
  THEORY_HEAVY
  READING_HEAVY
  GROUPWORK_HEAVY
  PARTICIPATION_MATTERS
  GRADE_SCALED
  GRADE_CURVED
  TOUGH_GRADING
  USEFUL
  NO_FINALS
  QUIZZES
  INTERESTING
}